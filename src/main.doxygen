/*! \mainpage Smoothed-particle hydrodynamics (SPH) code 

  \subpage developer_guide
 
  \section intro_sec Introduction
 
  Smoothed Particle Hydrodynamic (SPH) code
 
  \section install_sec Installation
  Check the source code from github and compile 
  \verbatim 
 git clone git://github.com/slitvinov/sph-blitz
 cd sph-blitz
 ./local-install.sh  \endverbatim
 The script configures and compiles the third party libraries
 - tcl \n
 http://www.tcl.tk/
 - cpptcl \n
 http://cpptcl.sourceforge.net/
 - blitz++ \n
 http://www.oonumerics.org/blitz/
 - glog \n
 http://code.google.com/p/google-glog/
 \section incomp_code Incompressible Version 
  \subsection restart_file Restart file format 
  \subsection input_file Input file format
  Examples of input files are stored in sph-blitz/case directory.
  Input files are writen in <b>TCL</b> language. See comments 
  in the files for explanation.
  
  \subsection sim Runnig simulations
  \verbatim
 cd src
 ./sph ../cases/couette \endverbatim 
  \subsection post Postprocessing
  To combine all time snapshots in one file
 \verbatim 
 cd outdata/
 ../../scripts/dat2punto.sh > punto.dat
 \endverbatim
  
  \subsection vis Visuzalization 
  
  \subsubsection vis_gnuplot gnuplot
  \image html pognuplot.png "Poiseuille flow: velocites of the particles visualization with gnuplot"
 
  \subsubsection vis_punto punto 

  \verbatim
 punto -D 2 -c 4 -B 0:0:0.04:0.04 -G -0.6:0.6 -s 8 -lc black -bg white  punto.dat \endverbatim
  \image html couette.png "Couette flow: particle visualization with punto"
  \image html poiseuille.png "Poiseuille flow: particle visualization with punto"



\section comp_code Compressible Version 

  \subsection input_file Input file format

two inputfiles for compressible version (both in cases folder)
<UL>
<LI>tcl-file with information on the configuration (same as for incompressible
case) 
<LI>additionally a file to initialize particles (.ivs)
</UL>

  
  \subsection simCompr Preparing and Runnig simulations
<OL>
<LI> <b>creating the .ivs-file</b> with the particle initialization information <br/>
go to desired folder in sph-blitz/scripts (for example for shock tube:)
\verbatim
sph-blitz/scripts/InitCondShockTube
\endverbatim
run 
\verbatim
make
\endverbatim
run desired initial condition script (example is 1D particle distribution with
constant mass particles) (q1D in file-name means quasi-1D (2D particle distribution))
\verbatim
./create_IC1D_mConst
\endverbatim
corresponding .ivs file is now created in sph-blitz/cases<br/>
<br/>
<LI> <b>running the simulation</b> <br/>
go to the source folder

 \verbatim
 cd ../../ src
\endverbatim
and run the simulation program with the two inputfiles (.tcl file WITHOUT file anding)
\verbatim

 ./sph ../cases/1Dshock ../cases/1DshockMConst.ivs
\endverbatim
Note: only use couples of configuration (.tcl) files and .ivs files which are
suitable
<br/>
the following couples go together

<table border="1">
<tr>
<td> <b> .tcl files </b> </td>
<td> <b> .ivs files </b> </td>
<td> <b> remarks </b>
</tr>
<tr>
<td>1Dshock.tcl</td>
<td>1DshockSpaceConst.ivs,<br/> 1DshockMConst.ivs</td>
<td> -- </td>
</tr>
<tr>
<td>q1Dshock.tcl</td>
<td>q1DshockSpaceConst.ivs,<br/> q1DshockMConst.ivs</td>
<td> -- </td>
</tr>
<tr>
<td>1DOscillation.tcl</td>
<td>1DOscillation.ivs</td>
<td>  see sph.cpp for mass calculation  </td>
</tr>
<tr>
<td>1DTravelingWave.tcl</td>
<td>1DTravelingWave.ivs</td>
<td> <UL> <LI> concerning artificial viscosity:c.f footnote under table <br/>
<LI> see sph.cpp for mass calculation </UL> </td>
</tr>
<tr>
<td>singleWaveWithReflection.tcl </td>
<td>1DunperturbedDomain.ivs</td>
<td> <UL> <LI> concerning artificial viscosity:c.f footnote under table <br/>
<LI> for mass calculation
<LI> see Timesolver/gastimesolverLeapfrog.cpp for moving wall </UL> </td>


</tr>
</table>

Note: A simulation without any art. visc. is not (physically) stable
as the SPH code does not introduce any intrinsic numerical dissipation

  \subsection postCompr Postprocessing
<OL>
<LI>  <b>combine all time snapshots in one file</b>
 \verbatim 
 cd outdata/
 ../../scripts/dat2punto.sh > punto.dat
 \endverbatim

<li>still in outdata: <b>run gnuplot</b>
\verbatim
gnuplot\
\endverbatim
in gnuplotshell, <b>run gnuplot-script</b> depending on the simulation type
<UL>
<LI> for shock tube with 1D particle distribution (4 options)
\verbatim
load '../../gnuplot/shockTube_1D/velocity_movie.gp'
load '../../gnuplot/shockTube_1D/pressure_movie.gp'
load '../../gnuplot/shockTube_1D/density_movie.gp'
load '../../gnuplot/shockTube_1D/energy_movie.gp'

\endverbatim
<LI> for q1D Shock-tube (2D particle distribution) (4 options as well),
  \verbatim
load '../../gnuplot/shockTube_q1D/velocity_movie.gp'
load '../../gnuplot/shockTube_q1D/pressure_movie.gp'
load '../../gnuplot/shockTube_q1D/density_movie.gp'
load '../../gnuplot/shockTube_q1D/energy_movie.gp'
\endverbatim
<LI>for 1D stationnary oscillating wave
\verbatim
load '../../gnuplot/1DWave/waveMovieVelocity.gp'
load '../../gnuplot/1DWave/waveMoviePressure.gp'
load '../../gnuplot/1DWave/waveMovieDensity.gp'
load '../../gnuplot/1DWave/waveMoviePosition.gp'
\endverbatim
<LI>for 1D traveling wave
\verbatim
load '../../gnuplot/1DWave/TravelingWaveMovieVelocity.gp'
load '../../gnuplot/1DWave/TravelingWaveMoviePressure.gp'
load '../../gnuplot/1DWave/TravelingWaveMovieDensity.gp'
load '../../gnuplot/1DWave/TravelingWaveMoviePosition.gp'
\endverbatim

<LI>for single 1D wave train with reflection and interference
\verbatim
load '../../gnuplot/1DWave/SingleWaveMovieVelocity.gp'
load '../../gnuplot/1DWave/SingleWaveMoviePressure.gp'
load '../../gnuplot/1DWave/SingleWaveMovieDensity.gp'
\endverbatim

If a post-processing including quantitative comparison to reference solution (for shock tube cases) is desired, 
refer to README in sph-blitz/scripts/postProcessingShockTube.
<br/>There are also results (readily post processed, including visualization) in their respective folder, for example:
<br/>sph-blitz/results/ShockTubeTestCase/1DpartDist_constMass_LeapFrog_sumDes
<br/>(this is for 1D particle distribution with constant mass particles, leapFrog integrator and summation approach for density calculation)

*/


//-----------------------------------------------------------

/*! \page developer_guide Developer Guide
  - boost smart pointers
  http://www.boost.org/doc/libs/1_43_0/libs/smart_ptr/shared_ptr.html \n
  \verbatim
  #include <iostream>
//#include <boost/smart_ptr/shared_ptr.hpp>
#include <boost/smart_ptr/make_shared.hpp>
/// example class 
class A {
public: 
  A() {
    std::cerr << "constructor of A\n";
  }
  A(const int n) {
    std::cerr << "constructor of A with n=" << n << " called\n";
  }
  ~A() {
    std::cerr << "destructor of A\n";
  }
  void say() const {
    std::cerr << "(A.say) I am object of A class\n";
  }
};

int main() {
  // crate a shared pointer to an object of A class
  /// call constructor with no arguments
  boost::shared_ptr<A> spa1 = boost::make_shared<A>();
  spa1->say();
  /// call constructor with one arguments
  boost::shared_ptr<A> spa2 = boost::make_shared<A>(42);
  spa2->say();
  // overwrite a pointer 
  spa2 = boost::make_shared<A>();
  // at this point destructor is called 
  // because there are no references to 
  // the object
  spa2->say();
  return EXIT_SUCCESS;
}
  \endverbatim

  - BOOST_FOREACH for iterations \n
  http://www.boost.org/doc/libs/1_57_0/doc/html/foreach.html

  - TCL for configuration files (see sph-blitz/cases/) \n
  http://www.tcl.tk/man/tcl/tutorial/tcltutorial.html

  - google logging \n
  http://google-glog.googlecode.com/svn/trunk/doc/glog.html
  Log files are stored in /tmp/ directory. The symbolic 
  links /tmp/sph.WARNING /tmp/sph.INFO point to the 
  last log files. Use 
  \verbatim
  tail -f /tmp/sph.INFO\endverbatim
  to follow the output
  \verbatim
  GLOG_logtostderr=1 ./sph <project name>\endverbatim
  sends all logging messages to stderr and they can be seen in 
  the text terminal.

  - To add a new file: add the name to the list in sph-blitz/src/Makefile.am 
  Run 
  \verbatim 
  ./bootstrap.sh\endverbatim
  in sph-blitz directory
*/
