#######################################################

Acoustic wave propagation test case

#######################################################

this test case is to assess the numerical dissipation of the SPH method 

---------------------- BEGIN LITERATURE SECTION -----------------------------------
literature on SPH acoustics / dissipation

-  Khoperskov2002, Astronomy Letters Volume 29, Number 4, 246-257, 
   Dissipative-acoustic instability in accretion disks at a nonlinear stage
   implement periodic source and initial perturbation: initial perturbation could be interesting for me: equation (19)
   Just don't know yet, how to initialize: is this only a velocity perturbation or do I have to initialize corresponding
   perturbations in pressure, ... as well???

- Colagrossi2010, Computer Physics Communications, Volume 181, Issue 3, March 2010, Pages 532-549 
  Free-surface flows solved by means of SPH schemes with numerical diffusive terms 
  can't access full text version of the paper, they have "traveling acoustic waves" as a test case,
  would perhaps e interesting to see, how they initialized their wave(s) (if it is detailed in the paper...)
  Abstract:
      A novel system of equations has been defined which contains diffusive terms in both the continuity and
      energy equations and, at the leading order, coincides with a standard weakly-compressible SPH scheme with
      artificial viscosity. A proper state equation is used to associate the internal energy variation to the
      pressure field and to increase the speed of sound when strong deformations/compressions of the fluid occur.
      The increase of the sound speed is associated to the shortening of the time integration step and, therefore,
      allows a larger accuracy during both breaking and impact events. Moreover, the diffusive terms
      allows reducing the high frequency numerical acoustic noise and smoothing the pressure field.
      Finally, an enhanced formulation for the second-order derivatives has been defined which is consistent
      and convergent all over the fluid domain and, therefore, permits to correctly model the diffusive
      terms up to the free surface. The model has been tested using different free surface flows clearly
      showing to be robust, efficient and accurate. An analysis of the CPU time cost and comparisons with
      the standard SPH scheme is provided.

- Wolfe2008, 16th International Conference in Central Europe on Computer Graphics, Visualization and Computer Vision
  Acoustic Modeling of Reverberation using Smoothed Particle Hydrodynamics 
  cannot really extract any useful information for me...

- Astronomy and astrophysics [0004-6361] Attwood yr:2007 vol:464 iss:2 pg:447 -450 
  Adaptive smoothing lengths in SPH 
  What I can use from this article is the measurement of the energy of the wave, which is in this case the
  total kinetic energy E=sum(1/2*m_i*v_i^2)...

- The Astrophysical Journal 701 (2009) 1269
  NUMERICAL DISSIPATION IN RSPH SIMULATIONS OF ASTROPHYSICAL FLOWS WITH APPLICATION TO PROTOPLANETARY DISKS
  RSPH=Regularized SPH: regularization technique where the solution at temporal intervals is mapped on 
  to a new set of regularly placed particles.
  ->this increases numerical dissipation, therefore this article deals also with numerical dissipation in SPH
  test cases of interest: 
    *linear waves:
     study temporal resolution at fixed sensor point, mainly to	see how the amplitude changes

    *Kelvin Helmholtz Instability:
     study growth of instability, no direct link to dissipation, but could be an interesting 2D inviscid
     test case for me???

- Monaghan2005 ReviewPaper
  in section 6.1 Monaghan studies the dispersion relation for a infinite one dimensional gas
  he finds out that there is good agreement with theorie for small wave numbers,
  for higher wave numbers though, the theoretically linear dispersion relation omega=c_s*k
  is not appoximated "exactly" anymore. (-->higher order kernels better...see. p.1731)
  The same test case (velocity wave) can be taken to test the numerical diffusion of the code (am I right???,
  see also concerns below....)
------------------------------------------END LITERATURE SECTION-------------------------------

  little ambiguity still exists because of the initialization:

  Monaghan2005: only velocity wave u(x)=0.05*c_s*sin(2 PI x), density remains constant: pressure not precised
		I would vary, rho, p according to isentropic relations as well:
      After a "bit" of thinking:
	NO: just leave everything else constant (p. rho), maximum velocity in a wave means no displacement of
	    the particles(->rho=spatially const at this instant,
			and its the instant where there is no acceleration->p=spatially constant)
  --> this way of initialization will give a stationary wave / a oscillation

WORKS GOOD; BUT NEW PROBLEM:
    seems as if Kernel (at least CubicSpline1D) interpolates spatially constant functions (here, rho) 
    "exactly" only for supLen=0.03, just discovered deviations (but very week) for other supLen values...
    When "watching" the movies of the rho,p profiles I noticed that mean value for p, rho was not exactly 1!
    after a certain time I figured out that it has to be the Kernel interpolation:original initialization was
    with mass m=0.01 per particle (100 particles, domainsize =1, density=1) 
    -->only a initialization with mass 0.00996.... resulted in a smoothed density of 1!!! NOT GOOD???
    --> conducted a test on how a constant value function is interpolated by SPH approximation (see open office sheet):
    the error encountered above turned out to be the "normal" interpolation error (dit not expected		
    it to be that sensitive to supLen)
    what I can do to circumvent this error (at least make it invisible) is:
      - perform the initialization of particle mass by smoothing (=interpolation) based on the density given
	as initial condition. This way the mass is calculated exactly in a way to obtain rho=1 and the center of
	the oscillations will be rho=1...(In this case the particle mass does not have the theoretically
	exact value of m=0.01 but depending on the selected supLen it is very close...)
	Furthermore I use supLen=0.03( instead of 0.026 (monaghna)) (as best results in my interpolation test)
    this interpolation error appears no matter which density mode is choosen (summation or continuity density).
    While for continuity density the density is integrated and therefore the function interpolation 
    formula is not used (but only the derivation approximation formula), it is still used once at the
    beginning of the program, as density is smoothed there once (even forcontinuity density approach)

  Post processing:
    what is interesting about this test case is the damping/dissipation
    in order to measure this damping  it is crucial that the time step is choosen in a way that N*dt=T,
     where N is the number of iterations, T the period of the oscillation and dt the time step.
    This ensures that the instant where the wave reaches its peak is actually simulated and can be output
    for the measurement of the damping.
    Two ways for damping measurement:
    - total kinetic energy of the wave at velocity peak time E=sum(1/2*m_i*v_i^2)
    - damping factor: let's assume the damping is exponential: dv_peak=-damp*v_peak,
      where v_peak is the peak velocity and dv_peak is the difference in peak velocity of two consecutive periods.

  -->mamual time control with dt<~0.002 (that is the automatic time control value) 
    -> pick dt=0.001 output every 4 dt: every0.004, is enough to resolve the peak velocity, periode T determined
	experimentally T= 239output steps: T=0.956 !(including art. viscosity)
	(for more results and the right T, see README in 1D oscillating wave)

	advantage 1 of manually choosen dt: easier to control simulation runtime in terms of "multiples of periods"
	advantage 2 of manually choosen dt: timestamp for outputfile names is regular, which makes it easier to read
	them automatically in program for the postprocessing!
    ...(for more information see README in <<results/acousticWavePropagation/1DOScillation>>)

next initialization case: taveling 1D wave

(for more information see README in <<results/acousticWavePropagation/1DOScillation>>

    
    
  